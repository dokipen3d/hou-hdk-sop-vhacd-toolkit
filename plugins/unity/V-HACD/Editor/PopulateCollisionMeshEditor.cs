/*
	Automate setup of collision geometry generated by V-HACD.

	IMPORTANT! ------------------------------------------	
	-----------------------------------------------------

	Author: 	SWANN
	Email:		sebastianswann@outlook.com

	LICENSE ------------------------------------------

	Copyright (c) 2016-2017 SWANN
	All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	3. The names of the contributors may not be used to endorse or promote products derived from this software without specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using DIY.Framework.Utils;
using UnityEditor;
using UnityEngine;

namespace DIY.Framework.Viewport
{
    [CustomEditor(typeof(PopulateCollisionMesh))]
    public class PopulateCollisionMeshEditor : Editor
    {
        private static readonly string[]    DONT_INCLUDE = { "m_Script" };

        private PopulateCollisionMesh       _targetScript;
        private SerializedProperty          _configFile;        

        private void OnEnable()
        {
            this._configFile = this.serializedObject.FindProperty("_configFile");
        }

        public override void OnInspectorGUI()
        {
            this._targetScript = (PopulateCollisionMesh)target;

            // handle default stuff
            serializedObject.Update();            
            LogError(this._configFile);
            DrawPropertiesExcluding(serializedObject, DONT_INCLUDE);
            serializedObject.ApplyModifiedProperties();

            // bind events
            if (this._targetScript == null) return;
            
            EditorGUILayout.BeginHorizontal();            
            if (GUILayout.Button("Populate")) this._targetScript.Populate();
            if (GUILayout.Button("Depopulate")) this._targetScript.Depopulate();
            
            EditorGUILayout.EndHorizontal();
        }        

        private static void LogSerializedProperty(string propertyname, string logmessage, MessageType messagetype = MessageType.None)
        {
            var message = string.Format("{0} {1}", propertyname, logmessage);
            EditorGUILayout.HelpBox(message, messagetype);
        }

        private static void LogError(SerializedProperty property)
        {
            var empty = false;
            
            switch (property.type)
            {
                case "PPtr<$TextAsset>":
                    empty = property.objectReferenceValue == null;
                    break;
            }

            if (empty) LogSerializedProperty(property.displayName, "field cannot be empty.", MessageType.Error);
        }
    }
}